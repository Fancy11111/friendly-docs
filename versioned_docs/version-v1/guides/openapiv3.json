{
    "openapi": "3.0.1",
    "info": {
        "title": "Friendly Captcha API",
        "description": "This is the public API of Friendly Captcha",
        "contact": {
            "name": "Friendly Captcha Support",
            "url": "https://friendlycaptcha.com/support",
            "email": "support@friendlycaptcha.com"
        },
        "version": "1.0"
    },
    "servers": [
        {
            "url": "/"
        }
    ],
    "paths": {
        "/api/v1/authInfo": {
            "post": {
                "tags": [
                    "CoreApi"
                ],
                "summary": "Check if an API key is valid",
                "operationId": "HandleSiteAuthInfoPost",
                "requestBody": {
                    "description": "request body",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthInfoPOSTRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthInfoPOSTResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "request"
            }
        },
        "/api/v1/puzzle": {
            "get": {
                "tags": [
                    "CoreApi"
                ],
                "summary": "Serves a Puzzle",
                "description": "The endpoint the widget uses to load a puzzle.\nIn most cases there is no reason to call this directly from your backend server.",
                "operationId": "PuzzleGet",
                "parameters": [
                    {
                        "name": "sitekey",
                        "in": "query",
                        "description": "SiteKey",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PuzzleGETResponseData"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/siteverify": {
            "post": {
                "tags": [
                    "CoreApi"
                ],
                "summary": "Verify the CAPTCHA solution,",
                "description": "The response will tell you whether the CAPTCHA solution is valid and hasn't been used before.\nIf you receive a response code other than 200 in production,\nyou should probably accept the user's form despite not having been able to verify the CAPTCHA solution.",
                "operationId": "SiteVerifyPost",
                "requestBody": {
                    "description": "request body",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SiteverifyPOSTRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SiteverifyPOSTResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FriendlyCaptchaAPIError"
                                }
                            }
                        }
                    }
                },
                "x-codegen-request-body-name": "request"
            }
        }
    },
    "components": {
        "schemas": {
            "AuthInfoPOSTRequest": {
                "required": [
                    "secret"
                ],
                "type": "object",
                "properties": {
                    "secret": {
                        "type": "string"
                    }
                }
            },
            "AuthInfoPOSTResponse": {
                "required": [
                    "success"
                ],
                "type": "object",
                "properties": {
                    "account_id": {
                        "type": "integer"
                    },
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "FriendlyCaptchaAPIError": {
                "type": "object",
                "properties": {
                    "details": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "PuzzleGETResponseData": {
                "required": [
                    "puzzle"
                ],
                "type": "object",
                "properties": {
                    "puzzle": {
                        "type": "string",
                        "description": "The base64 encoded, cryptographically signed Puzzle",
                        "example": "zXb9CIMTNoVEafRwrxHzQg=="
                    }
                }
            },
            "SiteverifyPOSTRequest": {
                "required": [
                    "secret",
                    "solution"
                ],
                "type": "object",
                "properties": {
                    "secret": {
                        "type": "string",
                        "description": "An API key that proves it's you, create one on the Friendly Captcha website"
                    },
                    "sitekey": {
                        "type": "string",
                        "description": "Optional: the sitekey that you want to make sure the puzzle was generated from."
                    },
                    "solution": {
                        "type": "string",
                        "description": "The solution value that the user submitted in the frc-captcha-solution field"
                    }
                }
            },
            "SiteverifyPOSTResponse": {
                "required": [
                    "success"
                ],
                "type": "object",
                "properties": {
                    "details": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "array",
                        "description": "If you are seeing status code 400 or 401 your server code is probably not configured correctly.\nsecret_missing (400) You forgot to add the secret (=API key) parameter.\nsecret_invalid (401) The API key you provided was invalid.\nsolution_missing (400) You forgot to add the solution parameter.\nbad_request (400) Something else is wrong with your request, e.g. your request body is empty.\nsolution_invalid\t(200) The solution you provided was invalid (perhaps the user tried to tamper with the puzzle).\nsolution_timeout_or_duplicate (200) The puzzle that the solution was for has expired or has already been used.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "success": {
                        "type": "boolean",
                        "description": "If success is false, errors will be a list containing at least one of the error codes."
                    }
                }
            }
        }
    }
}

